// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using MyRE.Core.Models;
using MyRE.Data;
using System;

namespace MyRE.Data.Migrations
{
    [DbContext(typeof(MyREContext))]
    partial class MyREContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyRE.Core.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RemoteAccountId")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("AccountId");

                    b.HasAlternateKey("RemoteAccountId")
                        .HasName("UNQ_RemoteAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MyRE.Core.Models.AppInstance", b =>
                {
                    b.Property<long>("AppInstanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<long>("AccountId");

                    b.Property<string>("InstanceServerBaseUri");

                    b.Property<string>("RemoteAppId")
                        .IsRequired();

                    b.HasKey("AppInstanceId");

                    b.HasAlternateKey("RemoteAppId")
                        .HasName("UNQ_RemoteAppId");

                    b.HasIndex("AccountId");

                    b.ToTable("AppInstances");
                });

            modelBuilder.Entity("MyRE.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MyRE.Core.Models.Block", b =>
                {
                    b.Property<long>("BlockId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("BlockId");

                    b.ToTable("Block");
                });

            modelBuilder.Entity("MyRE.Core.Models.BlockStatement", b =>
                {
                    b.Property<long>("BlockStatementId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BlockId");

                    b.Property<int>("Position");

                    b.Property<long?>("StatementId");

                    b.HasKey("BlockStatementId");

                    b.HasIndex("BlockId");

                    b.HasIndex("StatementId");

                    b.ToTable("BlockStatement");
                });

            modelBuilder.Entity("MyRE.Core.Models.Expression", b =>
                {
                    b.Property<long>("ExpressionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("ExpressionId");

                    b.ToTable("Expressions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Expression");
                });

            modelBuilder.Entity("MyRE.Core.Models.FunctionParameter", b =>
                {
                    b.Property<long>("FunctionParameterId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("InvocationExpressionExpressionId");

                    b.Property<int>("Position");

                    b.Property<long?>("ValueExpressionId");

                    b.HasKey("FunctionParameterId");

                    b.HasIndex("InvocationExpressionExpressionId");

                    b.HasIndex("ValueExpressionId");

                    b.ToTable("FunctionParameter");
                });

            modelBuilder.Entity("MyRE.Core.Models.Project", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<long?>("ParentInstanceAppInstanceId");

                    b.HasKey("ProjectId");

                    b.HasIndex("ParentInstanceAppInstanceId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MyRE.Core.Models.Routine", b =>
                {
                    b.Property<long>("RoutineId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BlockId");

                    b.Property<string>("Description");

                    b.Property<int>("ExecutionMethod");

                    b.Property<string>("Name");

                    b.Property<long?>("ProjectId");

                    b.HasKey("RoutineId");

                    b.HasIndex("BlockId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("MyRE.Core.Models.Statement", b =>
                {
                    b.Property<long>("StatementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("StatementId");

                    b.ToTable("Statements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Statement");
                });

            modelBuilder.Entity("MyRE.Core.Models.InvocationExpression", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Expression");

                    b.Property<string>("FunctionName");

                    b.ToTable("InvocationExpression");

                    b.HasDiscriminator().HasValue("InvocationExpression");
                });

            modelBuilder.Entity("MyRE.Core.Models.LiteralExpression", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Expression");

                    b.Property<string>("Value");

                    b.Property<int>("ValueType");

                    b.ToTable("LiteralExpression");

                    b.HasDiscriminator().HasValue("LiteralExpression");
                });

            modelBuilder.Entity("MyRE.Core.Models.VariableNameExpression", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Expression");

                    b.Property<string>("VariableName");

                    b.ToTable("VariableNameExpression");

                    b.HasDiscriminator().HasValue("VariableNameExpression");
                });

            modelBuilder.Entity("MyRE.Core.Models.ActionStatement", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Statement");

                    b.Property<long?>("ExpressionToEvaluateExpressionId");

                    b.HasIndex("ExpressionToEvaluateExpressionId");

                    b.ToTable("ActionStatement");

                    b.HasDiscriminator().HasValue("ActionStatement");
                });

            modelBuilder.Entity("MyRE.Core.Models.EventHandlerStatement", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Statement");

                    b.Property<long?>("BlockId");

                    b.Property<string>("Event");

                    b.HasIndex("BlockId");

                    b.ToTable("EventHandlerStatement");

                    b.HasDiscriminator().HasValue("EventHandlerStatement");
                });

            modelBuilder.Entity("MyRE.Core.Models.IfStatement", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Statement");

                    b.Property<long?>("BlockId")
                        .HasColumnName("IfStatement_BlockId");

                    b.Property<long?>("ConditionExpressionId");

                    b.HasIndex("BlockId");

                    b.HasIndex("ConditionExpressionId");

                    b.ToTable("IfStatement");

                    b.HasDiscriminator().HasValue("IfStatement");
                });

            modelBuilder.Entity("MyRE.Core.Models.VariableAssignmentStatement", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Statement");

                    b.Property<long?>("ValueExpressionId");

                    b.Property<string>("VariableName");

                    b.HasIndex("ValueExpressionId");

                    b.ToTable("VariableAssignmentStatement");

                    b.HasDiscriminator().HasValue("VariableAssignmentStatement");
                });

            modelBuilder.Entity("MyRE.Core.Models.VariableDefinitionStatement", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Statement");

                    b.Property<string>("VariableName")
                        .HasColumnName("VariableDefinitionStatement_VariableName");

                    b.Property<string>("VariableType");

                    b.ToTable("VariableDefinitionStatement");

                    b.HasDiscriminator().HasValue("VariableDefinitionStatement");
                });

            modelBuilder.Entity("MyRE.Core.Models.WhileStatement", b =>
                {
                    b.HasBaseType("MyRE.Core.Models.Statement");

                    b.Property<long?>("BlockId")
                        .HasColumnName("WhileStatement_BlockId");

                    b.Property<long?>("ConditionExpressionId")
                        .HasColumnName("WhileStatement_ConditionExpressionId");

                    b.HasIndex("BlockId");

                    b.HasIndex("ConditionExpressionId");

                    b.ToTable("WhileStatement");

                    b.HasDiscriminator().HasValue("WhileStatement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyRE.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyRE.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyRE.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyRE.Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyRE.Core.Models.Account", b =>
                {
                    b.HasOne("MyRE.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MyRE.Core.Models.AppInstance", b =>
                {
                    b.HasOne("MyRE.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyRE.Core.Models.BlockStatement", b =>
                {
                    b.HasOne("MyRE.Core.Models.Block")
                        .WithMany("Statements")
                        .HasForeignKey("BlockId");

                    b.HasOne("MyRE.Core.Models.Statement", "Statement")
                        .WithMany()
                        .HasForeignKey("StatementId");
                });

            modelBuilder.Entity("MyRE.Core.Models.FunctionParameter", b =>
                {
                    b.HasOne("MyRE.Core.Models.InvocationExpression")
                        .WithMany("Parameters")
                        .HasForeignKey("InvocationExpressionExpressionId");

                    b.HasOne("MyRE.Core.Models.Expression", "Value")
                        .WithMany()
                        .HasForeignKey("ValueExpressionId");
                });

            modelBuilder.Entity("MyRE.Core.Models.Project", b =>
                {
                    b.HasOne("MyRE.Core.Models.AppInstance", "ParentInstance")
                        .WithMany()
                        .HasForeignKey("ParentInstanceAppInstanceId");
                });

            modelBuilder.Entity("MyRE.Core.Models.Routine", b =>
                {
                    b.HasOne("MyRE.Core.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");

                    b.HasOne("MyRE.Core.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("MyRE.Core.Models.ActionStatement", b =>
                {
                    b.HasOne("MyRE.Core.Models.Expression", "ExpressionToEvaluate")
                        .WithMany()
                        .HasForeignKey("ExpressionToEvaluateExpressionId");
                });

            modelBuilder.Entity("MyRE.Core.Models.EventHandlerStatement", b =>
                {
                    b.HasOne("MyRE.Core.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");
                });

            modelBuilder.Entity("MyRE.Core.Models.IfStatement", b =>
                {
                    b.HasOne("MyRE.Core.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");

                    b.HasOne("MyRE.Core.Models.Expression", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionExpressionId");
                });

            modelBuilder.Entity("MyRE.Core.Models.VariableAssignmentStatement", b =>
                {
                    b.HasOne("MyRE.Core.Models.Expression", "Value")
                        .WithMany()
                        .HasForeignKey("ValueExpressionId");
                });

            modelBuilder.Entity("MyRE.Core.Models.WhileStatement", b =>
                {
                    b.HasOne("MyRE.Core.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");

                    b.HasOne("MyRE.Core.Models.Expression", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionExpressionId");
                });
#pragma warning restore 612, 618
        }
    }
}
